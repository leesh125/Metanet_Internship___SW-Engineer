
● 쿠버네티스 설치

쿠버네티스에선 컨테이너가 아닌 pod(이 안에 컨테이너가 있음)
kubeadm init --apiserver-advertise-address=213.0.113.3 \
> --pod-network-cidr=192.168.0.0/16 
 - 213.0.113.3 IP 주소는 Worker 노드가 연결할 Master 노드의 IP 주소
 - Calico network driver를 사용하려면  192.168.0.0 사용

● 쿠버네티스 구조

○ Master node
- kube-api-server: 모든 서비스와 통신
- etcd : 쿠버네티스의 데이터베이스(모든 클러스터 데이터 담는 db, 그래서 마스터노드는 최소 3개이상 생성해야함) 
- kube-scheduler: worker 노드가 몇개가 실행되고 있는지 항상 알고있어야함
- Control Plane Component : 어떤 노드에 어떤 pod를 배치하는지를 정하는 스케줄러
- kube-controller-manager: kubernetes에 있는 거의 모든 오브젝트 상태 관리


○ Worker node 
- kubelet과 kube-proxy로 구성됨
- kubelet: pod에서 컨테이너가 확실하게 동작하도록 관리
- kube-proxt: pod에서 네트워킹이 가능하게 해줌(pod에도 ip 존재 -> 네트워킹 존재)


● load balancer
- 마스터 노드를 3개이상 구동시켜 한 노드가 다운되어도 다른 노드가 동작 가능하게끔
- etcd만 따로 etcd cluster에 빼놓는 구조도 있음

● kubernetes object - Pod
- 쿠버네티스에서 배포할 수 있는 가장 작은 단위
- 한 개 이상의 컨테이너와 스트로지, 네트워크 속성 가짐
- pod내에 있는 container는 ip가 같지만 port를 다르게 하여 container 구분

○ pod 구성 패턴 
- sidecar : 원래 사용하려고 했던 기본 컨테이너 기능 확장/강화하는 용도 컨테이너 추가
- ambassador: 외부에서 프록시 컨테이너가 여러 캐시에 연결되게끔 하는 패턴

● kubernetes object - NameSpace
- 한 쿠버네티스 클러스터내 논리적 분리 단위

● Kubernetes Controller
○ 종류: Replication Controller : Pod 관리하며 지정된 숫자로 Pod 기동시키고 관리
  - Replication Controller 3개지로 구성되어 있음
    - Selector : label 기반,  RC가 관리한 Pod 가지고 오는데 사용
    - Replica 수: RC에 의해서 관리되는 Pod의 수로 그 숫자만큼 Pod 수 유지
    - Pod template: Pod 추가로 기동할 때 어떻게 Pod 만들지 Pod에 대한 정보 (도커
이미지, 포트, 라벨등)에 대한 정보 정의

※ 쿠버네티스 삼대장(반드시 기억★★!!): service deployment pod

● Delpoyment 방식
1. Rolling Deployment
- 일반적인 배포 의미하며 단순하게 Pod 구성하여 배포하는 전략
- 구버전에서 신번전으로 트래픽 점진적으로 전환하는 배포 방식

2. Blue/Green Deployment
- 구버전을 블루, 신버전을  그린이라고 해서 붙여진 이름
- 신버전 배포하고 일제히 전환하여 모든 연결 신버전을 바라보게 하는 전략

3. Canary Delpoyment
- 카나리아는 유독가스에 민감하여 유독가스 누출 위험 알리는 용도
- 테스트를 해보고 문제가 없으면 전환, 문제가 있으면 멈춤

kubeadm join 213.0.113.3:6443 --token 9monvb.2rkmtboupp8tzxyc \
	--discovery-token-ca-cert-hash sha256:e06321a42151578abce5262539d38eaf172f0b5b056f8b9caf003fa78825946a

● Kubernetes Object: ConfigMap
- 비기밀 데이터 키-값 상으로 저장하기 위해 사용하는 API 객체
- 컨테이너에 필요한 환경설정 내용을 컨테이너와 분리해서 제공하기 위헌 kubernetes 기능(환경설정이 너무 길어서)

● Kubernetes Volume
- pod에 종속되는 디스크 - pod 컨테이너에서 접근하는 스토리지 단위

● Kubernetes Volume 종류
1. emptyDir(임시 볼륨)
- 개별적인 Pod에 적용할 수 있는 Volume
- Pod가 삭제될 경우 emptyDir 또한 삭제 -> Pod 내부 컨테이너 간에 공유해야하는 휘발성 데이터 저장

2. hostpath(로컬 볼륨
- 호스트 디렉터리 Pod와 공유해서 사용하는 방식
- Pod가 삭제되어도 hostpath에 저장된 파일들은 호스트에 저장


3. Network Volume
  1. PV(PersistentVolume)
    - 시스템 관리자가 실제 물리 디스크 생성한 후, 이 디스크를 PersistentVolume 이름으로 kubernetes에 등록
    - 시스템 관리자가 생성한 물리 디스크를 kubernetes 클러스터에 표현
  2. PVC(PersistentVolumeClaim)
    - Pod 생성할 때, 볼륨 정의하고, 이 볼륨 정의 부분에 물리적 디스크에 대한 특성을 정의하는 것이 아니라 PVC 지정, 관리자가 생성한 PV와 연결
    - Pod의 볼륨과 이 PV를 연결하는 관계가 PVC

○ PV 상태 종류
1. Available: PV가 생성되고 나면 사용 가능한 상태
2. Bound : PVC(요청에 의해) 바인딩 되었을 때 상태
3. Released : PVC가 삭제되어 요청이 없을 경우
4. Fail : 모종의 이유로 문제가 생겼을 경우 

PV(Persistent Volume)
- ceph: storage 서버

● PV & PVC Lifecycle
1. Provisioning
• 정적(static) 또는 동적(dynamic) PV 생성하는 단계
• PV 생성이라는 단어를 프로비저닝이라고 불러도 모두 같은 의미

2. Binding
• PV를 PVC에 연결시키는 단계
• PVC는 사용자가 요청하는 볼륨 PV에 요청하고 PV는 그에 맞는 볼륨 있으면 할당
• PVC와 PV는 ClaimRef 사용하는 1:1 관계, 바인딩이 정상적으로 완료될 경우 bound 상태

3. Using
• Pod는 PVC를 볼륨으로 사용
• 클러스터는 PVC 확인하여 바인딩된 PV 찾고 해당 볼륨 Pod에서 사용

4. Reclaiming
• PV는 기존에 사용했던 PVC가 아니더라도 다른 PVC로 재활용 가능
• 사용이 종료된 PVC 삭제할 때, 사용했던 PV 데이터 어떻게 처리할지에 대한 설정

● 4. Lifecycle Reclaiming 정책
1. Retain
• PVC가 삭제되어 Released 상태 되어도 실제 내부 파일 삭제하지 않는 정책
• Persistent 한 데이터 계속해서 저장해야 하는 일반적인 방식
• Released 상태의 PV는 다른 PVC에 의해 사용될 수 있는 상태 아님
• Retain 사용하는 경우 PV 삭제한다고 해서 디스크 함께 삭제되는 것 아님

2. Delete
• PVC가 삭제되어 PV가 Released 상태가 되면 PV와 연결된 디스크 내부 자체 삭제
• 직접 디스크 생성하고 PV 직접 연결하는 작업보다 Dynamic Provisioning 주로 사용


● Pod Scheduling

-affinity: 지정한 레이블을 가진 Pod들이 있는 노드로 Scheduling,즉 이미 실행 중인 다른 Pod를 참고하여 Scheduling하는 방법  
          같은 조건을 가진 pod 배포
-anti-affinity: 같은 조건을 가진 pod를 피해서 다른 노드에 pod를 배포

- NoSchedule로 명시를 하면 그 pod는 배포가 안된다
- Taint는 Node에 정의하며, Toleration은 Pod에 정의하는데, Taint 처리된 Node에는 Pod가 배포되지 않는다. 
  Taint 처리된 Node에는 Taint에 맞는 Toleration을 가지고 있는 Pod 만 배포될 수있다.
 
- kubeadm init 하면 그것은 master node -> taint: noschedule이 자동으로 걸려서 마스터 노드는 배포가 막힘
- kubeadm join하면 그것은 worker node

○ Cordon & Drain
- 둘 다 
cordon: 기존의 pod는 남김
drain: 기존의 pod까지 옮겨버림


● Ansible
- 동일한 환경에 있는 server들에 작업들을 한 번에 할 수 있는 환경 구성 자동화 도구이다.

○ Infrastructure as Code: 코드를 가지고 인프라 구조를 만든다
- 인프라 운영 코드로 개발하여 관리하는 도구, "프로그래밍형 인프라"

○ ssh
- 보안: control node와 managed node를 안전하게

● Ansible 장점
1. AgentLess
- agent 없는 아키텍처를 기반으로 한다.(데몬이 없음)

● 구조
playbook : (기능)동작을 정의한 파일(yaml) 
inventory : Ansible이 제어하는 Infrastructure as Code 대상이 될 서버 목록 정의 파일


