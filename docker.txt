●Docker 정의

●Container 정의
 -> 하나의 OS 공유(Vmware로 OS 따로 안만들어도 돼서 여러개의 APP들(컨테이너)을 띄울 수 있음)
  -커널: 하드웨어(메모리,CPU 등)를 컨트롤 하는 역할
  -chroot: 최상위 Dir(윈도우 C, D 드라이브)
  -레이어 : 이미지를 구성하는 요소

● VM & Container

Vm vs Container
추상의 물리적인 하드웨어 || 추상의 애플리케이션 계층
하이퍼바이저 || 호스트 커널
Vm 마다 app이 있어 보안적임 || 여러개의 컨테이너를 포함한 도커가 다운되면 하위 모든 app 들 다운(컨테이너의 치명적 단점)


●Container Orchestration
다수의 컨테이너를 적절하게 분산하고 스케줄링하는 방법과 도구
1. 쿠버네티스
2. redhat 오픈시프트

● Docker Engine
도커 시작하면 dockerd(docker daemon)라는 이름이 프로세스로 올라옴
dockerd에 요청을 보내는 client는 바로 docker(이미지 다운좀 해달라, 이미지 내부 좀 바꿔주라)
그러면 dockerd는 응답을 해줌(dockerd가 서버, docker가 사용자)
서로 통신할때 REST API(인터페이스:접근 통로)를 통해 커뮤니케이션 함

● Docker Architecture (★★★)
1. client
- docker 명령어 사용

○ 용어
 - build 이미지 생성
 - pull 이미지 다운로드
    1.1 Registry를 거쳐 pull을 통해 이미지 다운
    1.2 직접 이미지를 생성
 - run 컨테이너 실행
  -> 실행하기전 이미지가 있는지 이미지 체킹을 함, 없으면 만들거나 registry에서 다운로드
      즉, docker pull과 docker run을 동시에 실행

2. Docker_Host
- docker daemon(서버)
- client와 rest api로 통신함


3. Registry
-이미지 저장하는 곳 (Private, Public)

● Docker Daemon
-dockerd(서버) docker host(사용자)와 rest api를 통해 통신
-docker object를 관리함(이미지, 컨테이너, 네트워크, 볼륨★)

● Docker client Commands

○ 도커의 구성요소
 - registry(이미지 저장소)
   -> node local에 이미지 pull(다운로드) push(업로드)

 - node local(이미지 관련)
   -> run 명령어 (이미지 다운후 실행하면 애플리케이션 하나 생성)
   -> commit 명령어(컨테이너를 이용해서 이미지를 만듬)
        - 별로 추천 안함(컨테이너는 프로세스, 작업이 이루어진다는 말은 불필요한 것들도 생성이 된다(ex. log file)
   -> save 명령어(.TAR 파일로 이미지 저장), load(저장된 이미지 불러오기) 백업용
   -> rmi 명령어 (이미지 삭제)
   -> create 명령어(이미지를 중지된 상태의 컨테이너로 생성)
   -> export 명령어(running 상태의 이미지를 .tar파일로 저장)
   

 - running(컨테이너 관련)
   -> start(시작), stop(멈춤)
   -> rm -f 명령어(실행중인 컨테이너 강제 삭제)
   -> rm 명령어(중지된 컨테이너 삭제)
   -> exec 명령어(외부에서 컨테이너 안의 명령을 실행하는 : 컨테이너 접속)

● Docker & Podman
도커의 단점은 dockerd 가 다운되면 그 하위 컨테이너 전부 다운
Podman은 daemon(서버)가 없어도 이미지 생성 다운 등이 가능하다.

● Docker swarm
- scaling(컨테이너 갯수를 줄이거나 늘릴 수 있다.)

subnet ip:213.0.113.0
DHCP settings: 213.0.113.128 ~ 213.0.113.255
NAT settings: gateway IP 213.0.113.2

● CentOs 8 Stream
1. Redhat 계열: Redhat Linux, Fedora Linux, CentOS Linux, Oracle Linux
	        Redhat Linux 8 이전: Fedora > RHEL7 -> CentOS7
			          upstream		downstream
	        Redhab Linux 8부터: Fedora, CentOS 8 Stream -> RHEL8 -> Rocky, Alma
			           upstream
2. Ubuntu 계열: Ubuntu Linux,
3. SUSE : OpenSuse Linux
4. BSD: Netbsd, Openbsd
Images consist of serveral LAYERS(여러개의 layer들이 합쳐져 하나의 이미지가 됨)
MySQL -> MariaDB

docker run --name mariadb-basic   -> --name : mariadb와 연관된 이름을 지음, mariadb-basic: 컨테이너 이름
-d mariadb:latest -> mariadb:latest 이미지
docker images : docker image 확인
docker ps : docker container 확인
lsof -i tcp:3306 -> container 내부에서 3306 port를 사용하는 컨테이너가 있으면 결과를 보여줌
docker ps -a : active 상태인 컨테이너와 deactive 컨테이너(stop) 둘 다 보여주라
docker rm -f mariadb2-basic: 중지를 하지않아도 강제로 컨테이너 삭제

● Docker Container
- commit 명령어로 현재 상태를 이미지로 만들 수 있음
- 컨테이너 마다 격리되어 있음
- 컨테이너가 삭제되면 데이터도 사라진다. -> persistent storage=volume(ex.하드디스크)으로 저장해놓음

● Docker Container(stack 이미지로 되어있는거 중요함!!!★)
- 이미지는 여러개의 layer로 되어있음(read-only)
- 컨테이너는 writable 성질을 가지고 있음
- Debian이라는 OS를 통해 apache, emacs등 이미지 사용 가능
  -> OS(Debian)은 kernel이 필요

Linux = bootfs + rootfs
rootfs = /bin, /etc, /usr ...
bootfs = Boot loader = Kernel

● container
inspect 명령어: 컨테이너 내부의 여러 정보를 확인 가능

-p 8080:80  -> port forwarding
8080: system 상의 포트(linux)
80: 컨테이너의 포트

================
====2022-06-21====
================

- yum install httpd -y -> apache web server 다운
- systemctl stop firewalld : 방화벽 stop
- systemctl disable firewalld : 방화벽 막아버리기

- systemctl start nginx (nginx) -> 아래와 같이 오류가 발생
Job for nginx.service failed because the control process exited with error code.
See "systemctl status nginx.service" and "journalctl -xe" for details.

httpd와 nginx가 같은 포트를 사용하기 때문에 오류 -> 따라서 httpd를 stop하고 해야함

● Docker Volume
- container 안의 파일 변경 사항을 UnionFS을 통해 관리
- write layer에는 이미지 layer의 데이터에서 변경된 사항 저장하므로 write layer
삭제 시 데이터 사라짐(데이터 휘발성)
-container의 데이터 휘발성 때문에 데이터를 container가 아닌 호스트에 저장

mount = 하드디스크 - 디렉토리 연결
-v 명령어 : 마운트


● Docker images
-한 개의 이미지는 다른 이미지를 기초로 하고있다.
-Dockerfile : 내가 이미지를 만듬


- commit 을 통해 생성한 이미지는 이름이 없음 -> tag를 통해 이름을 달아줘야함
tag: 이미지의 버전정보를 덧붙힘

○ 이미지 명령어
logs : 로그 정보 확인 ★

● Dockerfile
- docker build -t web_img .(현재 디렉토리) : Dockerfile을 이미지로 빌드(생성)
※ 아파치 index 위티 /var/www/html
-docker diff httpd : 그 뒤에 변경사항이 있는지 (C: change, A:added)


● Dockerfile 사용법
copy: 로컬에만 있는 파일 복사 가능
add: 로컬 뿐만 아니라 원격지의 파일까지 복사가능

-chmod 755
7 - read(4) write(2) excute(1) (user)
5 - read(4) excute(1) (group)
5 - read(4) excute(1) (other)

● Docker Registry


● Docker Network
- docker 같은 경우 CNM(container network model)을 사용

○ REMOTE Network Drivers
- 네트워크 유형에 따라 지원되지 않는 기능도 있음(weave,calico 많이 사용)

docker0: bridge(다리 역할), 각각의 컨테이너 ip는 veth를 통한 docker0(bridge)를 통해 연결
veth: port


○ Host Driver
- port를 통해 host process와 container가 충돌나지 않게끔 한다.


○ Macvlan
- Macvlan 브리지 모드 사용해서  컨테이너 인터페이스와 상위 호스트 or 하위 인터페이스 간 연결 설정
컴퓨터가 여러대일 때 연결해준다

○ Overlay DRIVER
- 다른 컴퓨터(컨테이너) 오버레이를 통해(터널을 뚫어) 네트워크를 갖게해준다

● Docker Compose
컨테이너 여러개를 만들 때 yaml file로 정의해서 명령어 하나로 전부 생성가능함

● Orchestration
- 컨테이너 오케스트레이션은 여러 클러스터 내의 마이크로 서비스를 기반으로 애플리케이션의 개별 컨테이너 작업을 
조정, 관리하거나 예약하는 자동화하는 작업이다.
- 컨테이너의 수명주기와 동적 환경을 관리하는 데 중점을 둔다

● Docker swarm
- 도커가 공식적으로 만든 orchestration tool
- 각각의 컴퓨터는 도커를 실행중이어야함

Replicated Service : 사용자가 원하는 수만큼 Task 동일하게 생성하여 실행되는 service

● Docker Monitoring
1. 데이터 수집 - cAdvisor, Node Exporter
2. 수집한 데이터 저장 - prometheus 컨테이너
3. 수집한 것들 시각화(firefox) - grafana

-순서
cAdvisor: 컨테이너 정보 수집 -> 프로테메우스 저장 -> 그라파나 시각화
node-exporter: Host(도커 실행되는 서버) 정보 수집 -> 위와 같음

dashboard에 893 추가 : 프로메테우스용 그라파나 인터페이스

● Azure 가상머신 만들기

○ 기본 사항:
리소스 그룹 : Azure-metanet
가상 머신 이름: FirstVM-Linux
지역: Korea Central
가용성 옵션: 가용성 영역
가용성 영역: Zone 1
보안 유형: 표준
이미지: CentOs-based 7.9 - Gen2
크기: Standard_DS1_v2 - 1 vcpu, 3.5 메모리 (60.23 달라)
인증 형식: SSG 공개 키
사용자 이름: nana
키 쌍 이름: FirstVM-Linux.key
공용 인바운드 포트: 선택한 포트
인바운드 포트: HTTP 80, HTTPS 443, SSH 22

○ 디스크
OS 디스크 유형: 표준 HDD(로컬 중복 스토리지)
vm으로 삭제 체크

○ 네트워킹
가상 네트워크: Azure-Metanet-vnet
서브넷:default(10.0.0.0/24)
공용 IP: FirstVm-Linux-ip
NIC: 기본

○관리
부트진단: 사용 안 함


https://www.netsarang.com/ko/xshell/
-링크에서 체험판 다운후 링크 받기

- scp - ssh를 이용한 copy

○ html 저장장소
- nginx = /usr/share/nginx/html
- apache = /var/www/html , /usr/local/apache2/htdocs
